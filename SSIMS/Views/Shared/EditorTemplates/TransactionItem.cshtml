@model SSIMS.Models.TransactionItem
@{
    var guid = @Html.ValueFor(model => model.ID);
    <tr>
        @Html.HiddenFor(model => model.ID)
        <td>
            @Html.DisplayFor(model => model.Item.ID)
            @Html.HiddenFor(model => model.Item.ID)
        </td>
        <td>
            @Html.DisplayFor(model => model.Item.Description)
            @Html.HiddenFor(model => model.Item.Description)
        </td>
        <td>
            <div>
                @if (Convert.ToInt32(Html.ValueFor(model => model.HandOverQty).ToString()) == 0)
                {
                    @Html.Raw("Completed");
                    @Html.HiddenFor(model => model.HandOverQty, new { @class = "form-control", id = "HandOverQty" + guid, data_target = guid })

                }

                else
                {
                    @Html.HiddenFor(model => model.HandOverQty, new { @class = "form-control", id = "HandOverQty" + guid, data_target = guid })
                    @Html.DisplayFor(model => model.HandOverQty)
                }
            </div>
        </td>
        <td>
            <div>
                @if (Convert.ToInt32(Html.ValueFor(model => model.HandOverQty).ToString()) == 0)
                {
                    @Html.HiddenFor(model => model.TakeOverQty, new { @class = "form-control", id = "HandOverQty" + guid, data_target = guid })
                }
                else
                {
                    @Html.EditorFor(model => model.TakeOverQty, new { htmlAttributes = new { @class = "form-control", id = "TakeOverQty" + guid, data_target = guid }, })

                }
                <div class="text-danger" id=@Html.ValueFor(model => model.ID) style="display:none;">This field cannot be more than it's Expected Quantity</div>
</td>
    </tr>
}
