@model SSIMS.ViewModels.RetrievalVM

@{
    ViewBag.Title = "Retrieval";
    ViewBag.Header = "Retrieval List";
    ViewBag.Section = "Disbursements";
    Layout = "~/Views/Shared/_Layout.cshtml";
    //List<RetrievalItemViewModel> vm = Model.rivmlist;
}


<script>

    function hide(indexx) {
        console.log(indexx);
        var element = document.getElementById(i);
        var isHidden = element.hidden;
        if (isHidden) {
            element.hidden = false;

        } else {
            element.hidden = true;
        }
    }
</script>
<style>
    #top-bar {
        width: 100%;
        height: 50px;
        margin: 5px 0px;
    }

   #top-bar button {
       float: left;
       margin-right: 50px;
       width: 200px;
       height: 40px;
       font-size: 15px;
       font-weight: bold;
       color: white;
       background-color: #437373;
   }

    .text-empty {
        margin: 60px auto 10px auto;
        width: 100%;
        text-align: center;
        font-size: 100px;
        color: lightgray;
    }

    .table-responsive{
        min-height:700px;
    }
    .special{
        background: linear-gradient(to right, rgba(146, 167, 154, 0.20) 0%, rgba(115, 147, 147, 0.31) 100%);
    }
</style>
<div id="top-bar">
    <div>
        <button onclick="window.location.href = '/Retrieval/Index';">Back</button>
    </div>
</div>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="table-responsive">

    <table class="table" id="one" style="border-bottom: 1px solid; border-bottom-color: lightslategrey">
        <tr class="special">
            <th>Item</th>
            <th>Dept</th>
            <th>HandOver Qty</th>
            <th>TakeOver Qty</th>
            <th>Reason</th>
        </tr>
        @for (int i = 0; i < Model.ROList.Count; i++)
        {
            @Html.HiddenFor(model => model.ROList[i].ID, new { htmlAttributes = new { @class = "form-control" }, })
        }

        @for (int i = 0; i < Model.rivmlist.Count; i++)
        //@for (int i = 0; i < vm.Count; i++)
        {
            //RetrievalItemViewModel Retrievalitem = [i];
            string index = "item" + (i + 1).ToString();
            int rowNo = Model.rivmlist[i].deptRetrievalItems.Count + 2;
            List<string> indexx = new List<string>();
            <tr>
                <td rowspan=@rowNo>
                    <span onclick=hide("@index")>+</span>
                    @Html.DisplayFor(model => model.rivmlist[i].item.Description)
                    @Html.HiddenFor(model => model.rivmlist[i].item.ID, new { htmlAttributes = new { @class = "form-control" }, })
                </td>
            </tr>
            for (int j = 0; j < Model.rivmlist[i].deptRetrievalItems.Count; j++)
            {
                //DeptRetrievalItemViewModel drivm = Retrievalitem.deptRetrievalItems[j];
                string newindex = index + j;
                indexx.Add(newindex);
                <tr id="@newindex">
                    <td>
                        @Html.DisplayFor(model => model.rivmlist[i].deptRetrievalItems[j].deptID)
                        @Html.HiddenFor(model => model.rivmlist[i].deptRetrievalItems[j].deptID, new { htmlAttributes = new { @class = "form-control" }, })
                        @Html.HiddenFor(model => model.rivmlist[i].deptRetrievalItems[j].transactionItem.Item.ID, new { htmlAttributes = new { @class = "form-control" }, })
                    </td>
                    <td>
                        @Html.DisplayFor(model => model.rivmlist[i].deptRetrievalItems[j].transactionItem.HandOverQty)
                        @Html.HiddenFor(model => model.rivmlist[i].deptRetrievalItems[j].transactionItem.HandOverQty, new { htmlAttributes = new { @class = "form-control" }, })
                    </td>
                    <td>
                        @Html.EditorFor(model => model.rivmlist[i].deptRetrievalItems[j].transactionItem.TakeOverQty, new { htmlAttributes = new { @class = "form-control", data_target = "element" + i.ToString(), max = @Model.rivmlist[i].deptRetrievalItems[j].transactionItem.HandOverQty }, min = 0 })
                    </td>
                    <td>
                        @Html.EditorFor(model => model.rivmlist[i].deptRetrievalItems[j].transactionItem.Reason, new { htmlAttributes = new { @class = "form-control" }, })
                    </td>
                </tr>
            }
            <tr>
                <td><strong>Total</strong></td>
                <td><strong>@Html.DisplayFor(model => model.rivmlist[i].transactionItem.HandOverQty)</strong></td>
                <td>
                    <strong id=@("element" + i.ToString())>
                        @Html.DisplayFor(model => model.rivmlist[i].transactionItem.TakeOverQty)

                        @*@Html.DisplayFor(model => model.rivmlist[i].transactionItem.TakeOverQty, new { htmlAttributes = new { @class = "form-control", id = "element" + i.ToString() }, max = @Model.rivmlist[i].transactionItem.HandOverQty })*@
                    </strong>
                </td>
            </tr>

        }
    </table>
    @if (Model.rivmlist.Count() == 0)
    {
        <div style="width:100%;height:50px">
            <p class="text-empty">Empty</p>
        </div>
    }
    else
    {
        <div>
            <button type="submit" value="Submit">Submit</button>
        </div>
    }

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script type="text/javascript">

            $("input").change(function () {
                var total = 0;
                var elementid = $(this).data("target");
                console.log(elementid);
                $("input").each(function () {
                    if ($(this).data("target") == elementid) {
                        total = total + parseInt($(this).val());
                    }

                });
                    console.log('here me');
                console.log(total.toString());
                $('#' + elementid).text(total);
            });
        //    var guid = $(this).data("target");
        //    var handOverQty = parseInt($('#'+"HandOverQty" + guid).val());
        //    var takeOverQty = parseInt($(this).val());
        //    if (handOverQty < takeOverQty) {
        //        $('#' + guid).css('display', 'block');
        //        console.log(handOverQty);
        //        console.log(takeOverQty);
        //        console.log('true');
        //        disableSave();
        //    }
        //    else {
        //        $('#' + guid).css('display', 'none');
        //        console.log(handOverQty);
        //        console.log(takeOverQty);
        //        console.log('false');
        //        disableSave();
        //    }
        //});

        function disableSave() {
            if (notValid()) {
                $("#save").attr("disabled", true);
            }
            else {
                $("#save").attr("disabled", false);
            }
        }

        function notValid() {
            var result = false;
             $('.text-danger').each(function (i, obj) {
                if ($(this).css('display') == 'block') {
                    console.log('not valid');
                    result = true;
                    return;
                }
             });
            return result;
        }

        $("#save").on('click', function () {
            if (notValid()) {
                console.log('here ' + notValid());
                return false;
            }
            console.log('out ' + notValid());
        });


        $('.Home').change(function () {
            var takeOverQty = ($(this).val());
            var identity = ($(this).attr("id"));
            var handOverQty = ($(this).id('targetelement'));
                var selectedCategory = $("#Category").val();
                var descriptionSelect = $('#Description');
                descriptionSelect.empty();
                if ( selectedCategory != null &&  selectedCategory != '') {
                    $.getJSON('@Url.Action("GetDescription")', { category:  selectedCategory }, function (descriptions) {
                        if (descriptions != null && !jQuery.isEmptyObject(descriptions))
                        {
                            descriptionSelect.append($('<option/>', {
                                value: null,
                                text: ""
                            }));
                            $.each(descriptions, function (index, description) {
                                descriptionSelect.append($('<option/>', {
                                    value: description.Value,
                                    text: description.Text
                                }));
                            });
                        };
                    });
                }
            });
        </script>
    }

</div>
}
