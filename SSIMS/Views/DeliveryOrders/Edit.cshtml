@model SSIMS.ViewModels.DeliveryOrderVM

@{
    ViewBag.Title = "Edit";
}

<h2>Create Delivery Order</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Create Delivery Order for Purcahase Order (@Html.DisplayFor(model => model.PurchaseOrderID)) </h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <dl class="dl-horizontal">
            <dt>
                @Html.DisplayNameFor(model => model.ID)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ID)
                @Html.HiddenFor(model => model.ID, new { htmlAttributes = new { @class = "form-control" } })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Supplier.SupplierName)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Supplier.SupplierName)
                @Html.HiddenFor(model => model.Supplier.SupplierName, new { htmlAttributes = new { @class = "form-control" } })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Supplier.Address)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Supplier.Address)
                @Html.HiddenFor(model => model.Supplier.Address)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Supplier.PhoneNumber)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Supplier.PhoneNumber)
                @Html.HiddenFor(model => model.Supplier.PhoneNumber)
            </dd>
            <dt>
                Attn:
                @Html.DisplayNameFor(model => model.CreatedByStaff.Name)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CreatedByStaff.Name)
                @Html.HiddenFor(model => model.CreatedByStaff.Name, new { htmlAttributes = new { @class = "form-control" } })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.CreatedDate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.CreatedDate)
                @Html.HiddenFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control" } })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.RepliedByStaff.Name)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.RepliedByStaff.Name)
                @Html.HiddenFor(model => model.RepliedByStaff.Name)
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.ResponseDate)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.ResponseDate)
                @Html.HiddenFor(model => model.ResponseDate, new { htmlAttributes = new { @class = "form-control" } })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.Status)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.Status)
                @Html.HiddenFor(model => model.Status, new { htmlAttributes = new { @class = "form-control" } })
            </dd>
            <dt>
                @Html.DisplayNameFor(model => model.PurchaseOrderID)
            </dt>
            <dd>
                @Html.DisplayFor(model => model.PurchaseOrderID)
                @Html.HiddenFor(model => model.PurchaseOrderID, new { htmlAttributes = new { @class = "form-control" } })
            </dd>
        </dl>
        <table class="table">

            <tr>
                <th>
                    Item Code
                </th>
                <th>
                    Item Description
                </th>
                <th>
                    @if (Html.ValueFor(model => model.Status).ToString() == "InProgress")
                    {
                        var text = "Remainder To Be Delivered";
                        @Html.Raw(text);
                    } else
                    {
                        var text = "Expected Quantity";
                        @Html.Raw(text);
                    }

                </th>
                <th>
                    Delivered Quantity
                </th>
                <th></th>
            </tr>
            @*@foreach (var item in Model.TransactionItems)*@
            @for (var i = 0; i < Model.TransactionItems.Count; i++)
            {

                @Html.EditorFor(m => Model.TransactionItems[i], "TransactionalItem")
            }
        </table>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" id="save" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "PurchaseOrders/Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">

        $("input").change( function () {
            var guid = $(this).data("target");
            var handOverQty = parseInt($('#'+"HandOverQty" + guid).val());
            var takeOverQty = parseInt($(this).val());
            if (handOverQty < takeOverQty) {
                $('#' + guid).css('display', 'block');
                console.log(handOverQty);
                console.log(takeOverQty);
                console.log('true');
                disableSave();
            }
            else {
                $('#' + guid).css('display', 'none');
                console.log(handOverQty);
                console.log(takeOverQty);
                console.log('false');
                disableSave();
            }
        });

        function disableSave() {
            if (notValid()) {
                $("#save").attr("disabled", true);
            }
            else {
                $("#save").attr("disabled", false);
            }
        }

        function notValid() {
            var result = false;
             $('.text-danger').each(function (i, obj) {
                if ($(this).css('display') == 'block') {
                    console.log('not valid');
                    result = true;
                    return;
                }
             });
            return result;
        }

        $("#save").on('click', function () {
            if (notValid()) {
                console.log('here ' + notValid());
                return false;
            }
            console.log('out ' + notValid());
        });


        $('.Home').change(function () {
            var takeOverQty = ($(this).val());
            var identity = ($(this).attr("id"));
            var handOverQty = ($(this).id('targetelement'));
                var selectedCategory = $("#Category").val();
                var descriptionSelect = $('#Description');
                descriptionSelect.empty();
                if ( selectedCategory != null &&  selectedCategory != '') {
                    $.getJSON('@Url.Action("GetDescription")', { category:  selectedCategory }, function (descriptions) {
                        if (descriptions != null && !jQuery.isEmptyObject(descriptions))
                        {
                            descriptionSelect.append($('<option/>', {
                                value: null,
                                text: ""
                            }));
                            $.each(descriptions, function (index, description) {
                                descriptionSelect.append($('<option/>', {
                                    value: description.Value,
                                    text: description.Text
                                }));
                            });
                        };
                    });
                }
            });
    </script>
}
